// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Model.Archivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ArchivoBytes");

                    b.Property<string>("Extension");

                    b.Property<string>("NombreArchivo");

                    b.HasKey("Id");

                    b.ToTable("Archivos");
                });

            modelBuilder.Entity("Web.Model.Busqueda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CantidadAsientos");

                    b.Property<string>("ConsumoPromedio");

                    b.Property<DateTime>("Fecha");

                    b.Property<int?>("MarcaId");

                    b.Property<int?>("ModeloId");

                    b.Property<int?>("PrecioMax");

                    b.Property<int?>("PrecioMin");

                    b.Property<string>("TipoCombustible");

                    b.Property<string>("TipoTransmision");

                    b.Property<string>("TipoVehiculo");

                    b.HasKey("Id");

                    b.ToTable("Busquedas");
                });

            modelBuilder.Entity("Web.Model.CompraVende.FotoPublicacionUsado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArchivoId");

                    b.Property<int>("PublicacionUsadoId");

                    b.HasKey("Id");

                    b.HasIndex("ArchivoId");

                    b.HasIndex("PublicacionUsadoId");

                    b.ToTable("FotoPublicacionUsado");
                });

            modelBuilder.Entity("Web.Model.CompraVende.InspeccionUsado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComunaId");

                    b.Property<string>("Direccion");

                    b.Property<DateTime>("FechaCandidata");

                    b.Property<int?>("PublicacionUsadoId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionUsadoId");

                    b.ToTable("InspeccionUsados");
                });

            modelBuilder.Entity("Web.Model.CompraVende.PublicacionUsado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CantidadDuenos");

                    b.Property<string>("Correo");

                    b.Property<string>("Direccion");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Nombres");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("OfertanteId");

                    b.Property<int?>("PrecioVehiculo");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("Rut");

                    b.Property<string>("Telefono");

                    b.Property<int?>("VehiculoId");

                    b.HasKey("Id");

                    b.HasIndex("OfertanteId");

                    b.HasIndex("RegionId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("PublicacionesUsados");
                });

            modelBuilder.Entity("Web.Model.Comuna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ciudad");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Comunas");
                });

            modelBuilder.Entity("Web.Model.Historico.Tasacion2019", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Anio");

                    b.Property<string>("Marca");

                    b.Property<string>("Modelo");

                    b.Property<string>("ModeloVersion");

                    b.Property<int>("Tasa");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Tasaciones2019");
                });

            modelBuilder.Entity("Web.Model.LugarServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo");

                    b.Property<string>("Direccion");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("DECIMAL(12,9)");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("DECIMAL(12,9)");

                    b.Property<string>("Nombre");

                    b.Property<string>("Servicios");

                    b.Property<string>("Telefono");

                    b.HasKey("Id");

                    b.ToTable("LugaresServicios");
                });

            modelBuilder.Entity("Web.Model.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Eliminado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(160);

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("Web.Model.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Eliminado");

                    b.Property<int>("MarcaId");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("Web.Model.Nuevos.FotoPublicacionNuevo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArchivoId");

                    b.Property<int>("PublicacionNuevoId");

                    b.HasKey("Id");

                    b.HasIndex("ArchivoId");

                    b.HasIndex("PublicacionNuevoId");

                    b.ToTable("FotosNuevos");
                });

            modelBuilder.Entity("Web.Model.Nuevos.PublicacionNuevo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescripcionCorta");

                    b.Property<string>("DescripcionLarga");

                    b.Property<DateTime>("FechaPublicacion");

                    b.Property<string>("Observaciones");

                    b.Property<int>("Precio");

                    b.Property<int?>("VendedorId");

                    b.Property<int>("VersionId");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId");

                    b.HasIndex("VersionId");

                    b.ToTable("PublicacionesNuevos");
                });

            modelBuilder.Entity("Web.Model.Opinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DetalleBreve");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("Puntuacion");

                    b.Property<string>("RangoPrecios");

                    b.Property<string>("TextoPrincipal");

                    b.Property<string>("Titulo");

                    b.Property<string>("UriArchivoFoto");

                    b.HasKey("Id");

                    b.ToTable("Opiniones");
                });

            modelBuilder.Entity("Web.Model.SolicitudContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Celular");

                    b.Property<string>("Comentario")
                        .IsRequired();

                    b.Property<bool>("Contactado");

                    b.Property<string>("Correo")
                        .IsRequired();

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Nombres")
                        .IsRequired();

                    b.Property<string>("ObservacionContacto");

                    b.Property<string>("Pagina");

                    b.HasKey("Id");

                    b.ToTable("SolicitudesContacto");
                });

            modelBuilder.Entity("Web.Model.Taller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComunaId");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("ComunaId");

                    b.ToTable("Talleres");
                });

            modelBuilder.Entity("Web.Model.Tasacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Anio");

                    b.Property<int>("Monto");

                    b.Property<int>("VersionId");

                    b.HasKey("Id");

                    b.HasIndex("VersionId");

                    b.ToTable("Tasaciones");
                });

            modelBuilder.Entity("Web.Model.Tipos.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Regiones");
                });

            modelBuilder.Entity("Web.Model.Tipos.TipoCombustible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Eliminado");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TiposCombustible");
                });

            modelBuilder.Entity("Web.Model.Tipos.TipoVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Eliminado");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TiposVehiculo");
                });

            modelBuilder.Entity("Web.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contrasena");

                    b.Property<string>("Correo");

                    b.Property<bool>("Deshabilitado");

                    b.Property<bool>("EsAdministrador");

                    b.Property<string>("IdentificadorExterno");

                    b.Property<string>("Nombre");

                    b.Property<int?>("Rut");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Web.Model.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Anio");

                    b.Property<string>("ColorExterior");

                    b.Property<string>("ColorInterior");

                    b.Property<int>("Estado");

                    b.Property<int?>("Kilometraje");

                    b.Property<string>("NumeroChasis");

                    b.Property<string>("NumeroMotor");

                    b.Property<string>("Patente");

                    b.Property<int?>("VersionId");

                    b.HasKey("Id");

                    b.HasIndex("VersionId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("Web.Model.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RazonSocial");

                    b.HasKey("Id");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("Web.Model.Vendenos.IntencionInspeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComunaId");

                    b.Property<string>("Direccion");

                    b.Property<DateTime>("FechaCandidata");

                    b.Property<int>("IntencionVendenosId");

                    b.Property<int?>("TallerId");

                    b.HasKey("Id");

                    b.HasIndex("IntencionVendenosId");

                    b.HasIndex("TallerId");

                    b.ToTable("IntencionesInspecciones");
                });

            modelBuilder.Entity("Web.Model.Vendenos.IntencionVendenos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnoTasacion");

                    b.Property<string>("Apellido");

                    b.Property<bool>("Contactado");

                    b.Property<string>("Correo");

                    b.Property<DateTime>("Fecha");

                    b.Property<int?>("Kilometraje");

                    b.Property<string>("Nombre");

                    b.Property<string>("ObservacionContacto");

                    b.Property<int?>("PorcentajeDescuento");

                    b.Property<int?>("TasacionId");

                    b.Property<string>("Telefono");

                    b.Property<int?>("Valor");

                    b.Property<int?>("VehiculoId");

                    b.HasKey("Id");

                    b.HasIndex("TasacionId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("IntencionesVendenos");
                });

            modelBuilder.Entity("Web.Model.Versiona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AirbagLaterales");

                    b.Property<bool>("AirbagPasajero");

                    b.Property<int?>("Airbags");

                    b.Property<bool>("AireAcondicionado");

                    b.Property<bool>("Alarma");

                    b.Property<bool>("Aleron");

                    b.Property<bool>("AperturaElectricaMaletero");

                    b.Property<int>("Asientos");

                    b.Property<bool>("Bluetooth");

                    b.Property<bool>("CamaraRetroceso");

                    b.Property<bool>("CierreCentralizado");

                    b.Property<int?>("Cilindrada");

                    b.Property<bool>("Climatizador");

                    b.Property<string>("Combustible");

                    b.Property<bool>("ControlCrucero");

                    b.Property<string>("DiametroLlantas");

                    b.Property<bool>("Eliminado");

                    b.Property<string>("EquipamientoDetallado");

                    b.Property<bool>("EspejosElectrico");

                    b.Property<bool>("FarosLed");

                    b.Property<bool>("FijacionAsientosNinos");

                    b.Property<bool>("FrenosAsistidos");

                    b.Property<int?>("Hp");

                    b.Property<bool>("LlantasAleacion");

                    b.Property<int?>("Marchas");

                    b.Property<int>("ModeloId");

                    b.Property<string>("MotorTfs");

                    b.Property<string>("Nombre");

                    b.Property<string>("PaisFabricacion");

                    b.Property<int?>("Puertas");

                    b.Property<decimal?>("RCarreteraKmLtr");

                    b.Property<decimal?>("RCiudadKmLtr");

                    b.Property<decimal?>("RMixto");

                    b.Property<bool>("RuedaRepuesto");

                    b.Property<bool>("SensorEstacionamiento");

                    b.Property<bool>("StartStop");

                    b.Property<string>("TipoVehiculo");

                    b.Property<string>("TorqueNm");

                    b.Property<string>("Traccion");

                    b.Property<string>("Transmision");

                    b.Property<string>("VFinalKmH");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.ToTable("Versiones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.CompraVende.FotoPublicacionUsado", b =>
                {
                    b.HasOne("Web.Model.Archivo", "Archivo")
                        .WithMany()
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Model.CompraVende.PublicacionUsado", "PublicacionUsado")
                        .WithMany("Fotos")
                        .HasForeignKey("PublicacionUsadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.CompraVende.InspeccionUsado", b =>
                {
                    b.HasOne("Web.Model.CompraVende.PublicacionUsado", "PublicacionUsado")
                        .WithMany()
                        .HasForeignKey("PublicacionUsadoId");
                });

            modelBuilder.Entity("Web.Model.CompraVende.PublicacionUsado", b =>
                {
                    b.HasOne("Web.Model.Usuario", "Ofertante")
                        .WithMany()
                        .HasForeignKey("OfertanteId");

                    b.HasOne("Web.Model.Tipos.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Web.Model.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId");
                });

            modelBuilder.Entity("Web.Model.Modelo", b =>
                {
                    b.HasOne("Web.Model.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.Nuevos.FotoPublicacionNuevo", b =>
                {
                    b.HasOne("Web.Model.Archivo", "Archivo")
                        .WithMany()
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Model.Nuevos.PublicacionNuevo", "PublicacionNuevo")
                        .WithMany("Fotos")
                        .HasForeignKey("PublicacionNuevoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.Nuevos.PublicacionNuevo", b =>
                {
                    b.HasOne("Web.Model.Vendedor", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId");

                    b.HasOne("Web.Model.Versiona", "Version")
                        .WithMany("PublicacionesNuevo")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.Taller", b =>
                {
                    b.HasOne("Web.Model.Comuna", "Comuna")
                        .WithMany()
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.Tasacion", b =>
                {
                    b.HasOne("Web.Model.Versiona", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Model.Vehiculo", b =>
                {
                    b.HasOne("Web.Model.Versiona", "Version")
                        .WithMany("Vehiculos")
                        .HasForeignKey("VersionId");
                });

            modelBuilder.Entity("Web.Model.Vendenos.IntencionInspeccion", b =>
                {
                    b.HasOne("Web.Model.Vendenos.IntencionVendenos", "IntencionVendenos")
                        .WithMany()
                        .HasForeignKey("IntencionVendenosId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Model.Taller", "Taller")
                        .WithMany()
                        .HasForeignKey("TallerId");
                });

            modelBuilder.Entity("Web.Model.Vendenos.IntencionVendenos", b =>
                {
                    b.HasOne("Web.Model.Tasacion", "Tasacion")
                        .WithMany()
                        .HasForeignKey("TasacionId");

                    b.HasOne("Web.Model.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId");
                });

            modelBuilder.Entity("Web.Model.Versiona", b =>
                {
                    b.HasOne("Web.Model.Modelo", "Modelo")
                        .WithMany("Versiones")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
